from PySide6.QtWidgets import QLabel, QApplication, QStackedWidget, QWidget, QPushButton, QVBoxLayout, QTextEdit, QHBoxLayout, QFrame, QMainWindow, QLineEdit, QMessageBox
from PySide6.QtCore import QSize
from PySide6.QtGui import QDoubleValidator, QIntValidator

import calc1re
    
class Whatever(QWidget):
    def __init__(self):
        super(). __init__()

        self.main_wdgt = QStackedWidget()
        #At first I wanted to use tabwidget, as stackedwidget was not in the tutorial I watched.
        #Good thing googling how to make tabwidget less ugly led to the discovery of stacked widget.
        first = QWidget()
        valid0 = QDoubleValidator()
        valid1 = QIntValidator()
        valid2 = QIntValidator()
        valid2.setBottom(1)
        self.history = QTextEdit()

        sum_but = QPushButton("Sum")
        diff_but = QPushButton("Difference")
        multi_but = QPushButton("Multiplication")
        divis_but = QPushButton("Division")
        power_but = QPushButton("Raise to Power")
        root_but = QPushButton("Square Root")
        prime_but = QPushButton("Prime Number")
        leacom_but = QPushButton("Least Common Multiple")
        int_div_but = QPushButton("Integer Division")
        perc_but = QPushButton("Percentage")

        sum_but.setMaximumWidth(400)
        sum_but.setMinimumWidth(200)
        diff_but.setMaximumWidth(400)
        diff_but.setMinimumWidth(200)
        multi_but.setMaximumWidth(400)
        multi_but.setMinimumWidth(200)
        divis_but.setMaximumWidth(400)
        divis_but.setMinimumWidth(200)
        power_but.setMaximumWidth(400)
        power_but.setMinimumWidth(200)
        root_but.setMaximumWidth(400)
        root_but.setMinimumWidth(200)
        prime_but.setMaximumWidth(400)
        prime_but.setMinimumWidth(200)
        leacom_but.setMaximumWidth(400)
        leacom_but.setMinimumWidth(200)
        int_div_but.setMaximumWidth(400)
        int_div_but.setMinimumWidth(200)
        perc_but.setMaximumWidth(400)
        perc_but.setMinimumWidth(200)
        self.history.setMaximumWidth(400)
        self.history.setMinimumWidth(300)

        first_hlay0 = QHBoxLayout()
        first_hlay0.addWidget(sum_but)
        first_hlay0.addWidget(diff_but)
        first_hlay0.addWidget(multi_but)

        first_hlay1 = QHBoxLayout()
        first_hlay1.addWidget(divis_but)
        first_hlay1.addWidget(power_but)
        first_hlay1.addWidget(root_but)
        first_hlay1.addWidget(prime_but)

        first_hlay2 = QHBoxLayout()
        first_hlay2.addWidget(leacom_but)
        first_hlay2.addWidget(int_div_but)
        first_hlay2.addWidget(perc_but)

        first_vlay = QVBoxLayout()
        first_vlay.addLayout(first_hlay0)
        first_vlay.addLayout(first_hlay1)
        first_vlay.addLayout(first_hlay2)

        first_hlay = QHBoxLayout()
        first_hlay.addLayout(first_vlay)
        first_hlay.addWidget(self.history)
        first.setLayout(first_hlay)

        sum = QWidget()
        sum_label0 = QLabel("Add numbers.")
        sum_back = QPushButton("Back")
        sum_label0.setMaximumWidth(300)
        sum_back.setMaximumWidth(300)
        hlay_sum0 = QHBoxLayout()
        hlay_sum0.addWidget(sum_label0)
        hlay_sum0.addWidget(sum_back)
        sum_label1 = QLabel("First number:")
        sum_label1.setMaximumWidth(300)
        self.sum_line1 = QLineEdit()
        self.sum_line1.setMaximumWidth(300)
        self.sum_line1.setValidator(valid0)
        hlay_sum1 = QHBoxLayout()
        hlay_sum1.addWidget(sum_label1)
        hlay_sum1.addWidget(self.sum_line1)
        sum_label2 = QLabel("Second number:")
        sum_label2.setMaximumWidth(300)
        self.sum_line2 = QLineEdit()
        self.sum_line2.setMaximumWidth(300)
        self.sum_line2.setValidator(valid0)
        hlay_sum2 = QHBoxLayout()
        hlay_sum2.addWidget(sum_label2)
        hlay_sum2.addWidget(self.sum_line2)
        sum_label3 = QLabel("Third number(optional):")
        sum_label3.setMaximumWidth(300)
        self.sum_line3 = QLineEdit()
        self.sum_line3.setMaximumWidth(300)
        self.sum_line3.setValidator(valid0)
        hlay_sum3 = QHBoxLayout()
        hlay_sum3.addWidget(sum_label3)
        hlay_sum3.addWidget(self.sum_line3)
        sum_label4 = QLabel("Fourth number(optional):")
        sum_label4.setMaximumWidth(300)
        self.sum_line4 = QLineEdit()
        self.sum_line4.setMaximumWidth(300)
        self.sum_line4.setValidator(valid0)
        hlay_sum4 = QHBoxLayout()
        hlay_sum4.addWidget(sum_label4)
        hlay_sum4.addWidget(self.sum_line4)
        self.sum_label5 = QLabel("Calculate result.")
        self.sum_label5.setMaximumWidth(300)
        self.sum_label5.setMaximumHeight(150)
        self.sum_label5.setWordWrap(True)
        sum_go = QPushButton("Go!")
        sum_go.setMaximumWidth(300)
        hlay_sum5 = QHBoxLayout()
        hlay_sum5.addWidget(self.sum_label5)
        hlay_sum5.addWidget(sum_go)
        sum_vlay = QVBoxLayout()
        sum_vlay.addLayout(hlay_sum0)
        sum_vlay.addLayout(hlay_sum1)
        sum_vlay.addLayout(hlay_sum2)
        sum_vlay.addLayout(hlay_sum3)
        sum_vlay.addLayout(hlay_sum4)
        sum_vlay.addLayout(hlay_sum5)
        sum.setLayout(sum_vlay)
        sum_back.clicked.connect(self.calc_back)
        sum_go.clicked.connect(self.the_sum)

        diff = QWidget()
        diff_label0 = QLabel("Subtract numbers.")
        diff_back = QPushButton("Back")
        diff_label0.setMaximumWidth(300)
        diff_back.setMaximumWidth(300)
        hlay_diff0 = QHBoxLayout()
        hlay_diff0.addWidget(diff_label0)
        hlay_diff0.addWidget(diff_back)
        diff_label1 = QLabel("First number(minuend):")
        diff_label1.setMaximumWidth(300)
        self.diff_line1 = QLineEdit()
        self.diff_line1.setMaximumWidth(300)
        self.diff_line1.setValidator(valid0)
        hlay_diff1 = QHBoxLayout()
        hlay_diff1.addWidget(diff_label1)
        hlay_diff1.addWidget(self.diff_line1)
        diff_label2 = QLabel("Second number(subtrahend):")
        diff_label2.setMaximumWidth(300)
        self.diff_line2 = QLineEdit()
        self.diff_line2.setMaximumWidth(300)
        self.diff_line2.setValidator(valid0)
        hlay_diff2 = QHBoxLayout()
        hlay_diff2.addWidget(diff_label2)
        hlay_diff2.addWidget(self.diff_line2)
        diff_label3 = QLabel("Third number(optional subtrahend):")
        diff_label3.setMaximumWidth(300)
        self.diff_line3 = QLineEdit()
        self.diff_line3.setMaximumWidth(300)
        self.diff_line3.setValidator(valid0)
        hlay_diff3 = QHBoxLayout()
        hlay_diff3.addWidget(diff_label3)
        hlay_diff3.addWidget(self.diff_line3)
        self.diff_label4 = QLabel("Calculate result.")
        self.diff_label4.setMaximumWidth(300)
        self.diff_label4.setMaximumHeight(150)
        self.diff_label4.setWordWrap(True)
        diff_go = QPushButton("Go!")
        diff_go.setMaximumWidth(300)
        hlay_diff4 = QHBoxLayout()
        hlay_diff4.addWidget(self.diff_label4)
        hlay_diff4.addWidget(diff_go)
        diff_lay = QVBoxLayout()
        diff_lay.addLayout(hlay_diff0)
        diff_lay.addLayout(hlay_diff1)
        diff_lay.addLayout(hlay_diff2)
        diff_lay.addLayout(hlay_diff3)
        diff_lay.addLayout(hlay_diff4)
        diff.setLayout(diff_lay)
        diff_back.clicked.connect(self.calc_back)
        diff_go.clicked.connect(self.the_diff)

        multi = QWidget()
        multi_label0 = QLabel("Multiply numbers.")
        multi_back = QPushButton("Back")
        multi_label0.setMaximumWidth(300)
        multi_back.setMaximumWidth(300)
        hlay_multi0 = QHBoxLayout()
        hlay_multi0.addWidget(multi_label0)
        hlay_multi0.addWidget(multi_back)
        multi_label1 = QLabel("First number:")
        multi_label1.setMaximumWidth(300)
        self.multi_line1 = QLineEdit()
        self.multi_line1.setMaximumWidth(300)
        self.multi_line1.setValidator(valid0)
        hlay_multi1 = QHBoxLayout()
        hlay_multi1.addWidget(multi_label1)
        hlay_multi1.addWidget(self.multi_line1)
        multi_label2 = QLabel("Second number:")
        multi_label2.setMaximumWidth(300)
        self.multi_line2 = QLineEdit()
        self.multi_line2.setMaximumWidth(300)
        self.multi_line2.setValidator(valid0)
        hlay_multi2 = QHBoxLayout()
        hlay_multi2.addWidget(multi_label2)
        hlay_multi2.addWidget(self.multi_line2)
        multi_label3 = QLabel("Third number(optional):")
        multi_label3.setMaximumWidth(300)
        self.multi_line3 = QLineEdit()
        self.multi_line3.setMaximumWidth(300)
        self.multi_line3.setValidator(valid0)
        hlay_multi3 = QHBoxLayout()
        hlay_multi3.addWidget(multi_label3)
        hlay_multi3.addWidget(self.multi_line3)
        multi_label4 = QLabel("Fourth number(optional):")
        multi_label4.setMaximumWidth(300)
        self.multi_line4 = QLineEdit()
        self.multi_line4.setMaximumWidth(300)
        self.multi_line4.setValidator(valid0)
        hlay_multi4 = QHBoxLayout()
        hlay_multi4.addWidget(multi_label4)
        hlay_multi4.addWidget(self.multi_line4)
        self.multi_label5 = QLabel("Calculate result.")
        self.multi_label5.setMaximumWidth(300)
        self.multi_label5.setMaximumHeight(150)
        self.multi_label5.setWordWrap(True)
        multi_go = QPushButton("Go!")
        multi_go.setMaximumWidth(300)
        hlay_multi5 = QHBoxLayout()
        hlay_multi5.addWidget(self.multi_label5)
        hlay_multi5.addWidget(multi_go)
        multi_vlay = QVBoxLayout()
        multi_vlay.addLayout(hlay_multi0)
        multi_vlay.addLayout(hlay_multi1)
        multi_vlay.addLayout(hlay_multi2)
        multi_vlay.addLayout(hlay_multi3)
        multi_vlay.addLayout(hlay_multi4)
        multi_vlay.addLayout(hlay_multi5)
        multi.setLayout(multi_vlay)
        multi_back.clicked.connect(self.calc_back)
        multi_go.clicked.connect(self.the_mult)
        
        divis = QWidget()
        divis_label0 = QLabel("Divide numbers.")
        divis_back = QPushButton("Back")
        divis_label0.setMaximumWidth(300)
        divis_back.setMaximumWidth(300)
        hlay_divis0 = QHBoxLayout()
        hlay_divis0.addWidget(divis_label0)
        hlay_divis0.addWidget(divis_back)
        divis_label1 = QLabel("First number(dividend):")
        divis_label1.setMaximumWidth(300)
        self.divis_line1 = QLineEdit()
        self.divis_line1.setMaximumWidth(300)
        self.divis_line1.setValidator(valid0)
        hlay_divis1 = QHBoxLayout()
        hlay_divis1.addWidget(divis_label1)
        hlay_divis1.addWidget(self.divis_line1)
        divis_label2 = QLabel("Second number(divisor):")
        divis_label2.setMaximumWidth(300)
        self.divis_line2 = QLineEdit()
        self.divis_line2.setMaximumWidth(300)
        self.divis_line2.setValidator(valid0)
        hlay_divis2 = QHBoxLayout()
        hlay_divis2.addWidget(divis_label2)
        hlay_divis2.addWidget(self.divis_line2)
        divis_label3 = QLabel("Third number(optional divisor):")
        divis_label3.setMaximumWidth(300)
        self.divis_line3 = QLineEdit()
        self.divis_line3.setMaximumWidth(300)
        self.divis_line3.setValidator(valid0)
        hlay_divis3 = QHBoxLayout()
        hlay_divis3.addWidget(divis_label3)
        hlay_divis3.addWidget(self.divis_line3)
        self.divis_label4 = QLabel("Calculate result.")
        self.divis_label4.setMaximumWidth(300)
        self.divis_label4.setMaximumHeight(150)
        self.divis_label4.setWordWrap(True)
        divis_go = QPushButton("Go!")
        divis_go.setMaximumWidth(300)
        hlay_divis4 = QHBoxLayout()
        hlay_divis4.addWidget(self.divis_label4)
        hlay_divis4.addWidget(divis_go)
        divis_lay = QVBoxLayout()
        divis_lay.addLayout(hlay_divis0)
        divis_lay.addLayout(hlay_divis1)
        divis_lay.addLayout(hlay_divis2)
        divis_lay.addLayout(hlay_divis3)
        divis_lay.addLayout(hlay_divis4)
        divis.setLayout(divis_lay)
        divis_back.clicked.connect(self.calc_back)
        divis_go.clicked.connect(self.the_divis)

        power = QWidget()
        power_label0 = QLabel("Raise a number to a power.")
        power_back = QPushButton("Back")
        power_label0.setMaximumWidth(300)
        power_back.setMaximumWidth(300)
        hlay_power0 = QHBoxLayout()
        hlay_power0.addWidget(power_label0)
        hlay_power0.addWidget(power_back)
        power_label1 = QLabel("First number(base)")
        power_label1.setMaximumWidth(300)
        self.power_line1 = QLineEdit()
        self.power_line1.setMaximumWidth(300)
        self.power_line1.setValidator(valid0)
        hlay_power1 = QHBoxLayout()
        hlay_power1.addWidget(power_label1)
        hlay_power1.addWidget(self.power_line1)
        power_label2 = QLabel("Second number(exponent)")
        power_label2.setMaximumWidth(300)
        self.power_line2 = QLineEdit()
        self.power_line2.setMaximumWidth(300)
        self.power_line2.setValidator(valid0)
        hlay_power2 = QHBoxLayout()
        hlay_power2.addWidget(power_label2)
        hlay_power2.addWidget(self.power_line2)
        self.power_label3 = QLabel("Calculate result.")
        self.power_label3.setMaximumWidth(300)
        self.power_label3.setMaximumHeight(150)
        self.power_label3.setWordWrap(True)
        power_go = QPushButton("Go!")
        power_go.setMaximumWidth(300)
        hlay_power3 = QHBoxLayout()
        hlay_power3.addWidget(self.power_label3)
        hlay_power3.addWidget(power_go)
        power_lay = QVBoxLayout()
        power_lay.addLayout(hlay_power0)
        power_lay.addLayout(hlay_power1)
        power_lay.addLayout(hlay_power2)
        power_lay.addLayout(hlay_power3)
        power.setLayout(power_lay)
        power_back.clicked.connect(self.calc_back)
        power_go.clicked.connect(self.the_pwr)

        root = QWidget()
        root_label0 = QLabel("Find the square root of a number.")
        root_back = QPushButton("Back")
        root_label0.setMaximumWidth(300)
        root_back.setMaximumWidth(300)
        hlay_root0 = QHBoxLayout()
        hlay_root0.addWidget(root_label0)
        hlay_root0.addWidget(root_back)
        root_label1 = QLabel("One number: ")
        root_label1.setMaximumWidth(300)
        self.root_line = QLineEdit()
        self.root_line.setMaximumWidth(300)
        self.root_line.setValidator(valid0)
        hlay_root1 = QHBoxLayout()
        hlay_root1.addWidget(root_label1)
        hlay_root1.addWidget(self.root_line)
        self.root_label2 = QLabel("Calculate result.")
        self.root_label2.setMaximumWidth(300)
        self.root_label2.setMaximumHeight(150)
        self.root_label2.setWordWrap(True)
        root_go = QPushButton("Go!")
        root_go.setMaximumWidth(300)
        hlay_root2 = QHBoxLayout()
        hlay_root2.addWidget(self.root_label2)
        hlay_root2.addWidget(root_go)
        root_lay = QVBoxLayout()
        root_lay.addLayout(hlay_root0)
        root_lay.addLayout(hlay_root1)
        root_lay.addLayout(hlay_root2)
        root.setLayout(root_lay)
        root_back.clicked.connect(self.calc_back)
        root_go.clicked.connect(self.the_root)

        prime = QWidget()
        prime_label0 = QLabel("Find if a number is a prime number.")
        prime_back = QPushButton("Back")
        prime_label0.setMaximumWidth(300)
        prime_back.setMaximumWidth(300)
        hlay_prime0 = QHBoxLayout()
        hlay_prime0.addWidget(prime_label0)
        hlay_prime0.addWidget(prime_back)
        prime_label1 = QLabel("One positive whole number: ")
        prime_label1.setMaximumWidth(300)
        self.prime_line = QLineEdit()
        self.prime_line.setMaximumWidth(300)
        self.prime_line.setValidator(valid2)
        hlay_prime1 = QHBoxLayout()
        hlay_prime1.addWidget(prime_label1)
        hlay_prime1.addWidget(self.prime_line)
        self.prime_label2 = QLabel("Calculate result.")
        self.prime_label2.setMaximumWidth(300)
        self.prime_label2.setMaximumHeight(150)
        self.prime_label2.setWordWrap(True)
        prime_go = QPushButton("Go!")
        prime_go.setMaximumWidth(300)
        hlay_prime2 = QHBoxLayout()
        hlay_prime2.addWidget(self.prime_label2)
        hlay_prime2.addWidget(prime_go)
        prime_lay = QVBoxLayout()
        prime_lay.addLayout(hlay_prime0)
        prime_lay.addLayout(hlay_prime1)
        prime_lay.addLayout(hlay_prime2)
        prime.setLayout(prime_lay)
        prime_back.clicked.connect(self.calc_back)
        prime_go.clicked.connect(self.the_prim)
        
        leacom = QWidget()
        leacom_label0 = QLabel("The least(lowest) common multiple of some numbers.")
        leacom_back = QPushButton("Back")
        leacom_label0.setMaximumWidth(300)
        leacom_label0.setMaximumHeight(150)
        leacom_back.setMaximumWidth(300)
        hlay_leacom0 = QHBoxLayout()
        hlay_leacom0.addWidget(leacom_label0)
        hlay_leacom0.addWidget(leacom_back)
        leacom_label1 = QLabel("First positive whole number: ")
        leacom_label1.setMaximumWidth(300)
        leacom_label1.setMaximumHeight(150)
        self.leacom_line1 = QLineEdit()
        self.leacom_line1.setMaximumWidth(300)
        self.leacom_line1.setValidator(valid2)
        hlay_leacom1 = QHBoxLayout()
        hlay_leacom1.addWidget(leacom_label1)
        hlay_leacom1.addWidget(self.leacom_line1)
        leacom_label2 = QLabel("Second positive whole number: ")
        leacom_label2.setMaximumWidth(300)
        leacom_label2.setMaximumHeight(150)
        self.leacom_line2 = QLineEdit()
        self.leacom_line2.setMaximumWidth(300)
        self.leacom_line2.setValidator(valid2)
        hlay_leacom2 = QHBoxLayout()
        hlay_leacom2.addWidget(leacom_label2)
        hlay_leacom2.addWidget(self.leacom_line2)
        leacom_label3 = QLabel("Third positive whole number(optional): ")
        leacom_label3.setMaximumWidth(300)
        leacom_label3.setMaximumHeight(150)
        self.leacom_line3 = QLineEdit()
        self.leacom_line3.setMaximumWidth(300)
        self.leacom_line3.setValidator(valid2)
        hlay_leacom3 = QHBoxLayout()
        hlay_leacom3.addWidget(leacom_label3)
        hlay_leacom3.addWidget(self.leacom_line3)
        self.leacom_label4 = QLabel("Calculate result.")
        self.leacom_label4.setMaximumWidth(400)
        self.leacom_label4.setMaximumHeight(150)
        self.leacom_label4.setWordWrap(True)
        leacom_go = QPushButton("Go!")
        leacom_go.setMaximumWidth(300)
        hlay_leacom4 = QHBoxLayout()
        hlay_leacom4.addWidget(self.leacom_label4)
        hlay_leacom4.addWidget(leacom_go)
        leacom_lay = QVBoxLayout()
        leacom_lay.addLayout(hlay_leacom0)
        leacom_lay.addLayout(hlay_leacom1)
        leacom_lay.addLayout(hlay_leacom2)
        leacom_lay.addLayout(hlay_leacom3)
        leacom_lay.addLayout(hlay_leacom4)
        leacom.setLayout(leacom_lay)
        leacom_back.clicked.connect(self.calc_back)
        leacom_go.clicked.connect(self.the_leacom)

        int_div = QWidget()
        int_div_label0 = QLabel("Division of whole numbers.")
        int_div_back = QPushButton("Back")
        int_div_label0.setMaximumWidth(300)
        int_div_label0.setMaximumHeight(150)
        int_div_back.setMaximumWidth(300)
        hlay_intdiv0 = QHBoxLayout()
        hlay_intdiv0.addWidget(int_div_label0)
        hlay_intdiv0.addWidget(int_div_back)
        int_div_label1 = QLabel("First whole number(dividend):")
        int_div_label1.setMaximumWidth(300)
        int_div_label1.setMaximumHeight(150)
        self.int_div_line1 = QLineEdit()
        self.int_div_line1.setMaximumWidth(300)
        self.int_div_line1.setValidator(valid1)
        hlay_intdiv1 = QHBoxLayout()
        hlay_intdiv1.addWidget(int_div_label1)
        hlay_intdiv1.addWidget(self.int_div_line1)
        int_div_label2 = QLabel("Second whole number(divisor):")
        int_div_label2.setMaximumWidth(300)
        int_div_label2.setMaximumHeight(150)
        self.int_div_line2 = QLineEdit()
        self.int_div_line2.setMaximumWidth(300)
        self.int_div_line2.setValidator(valid1)
        hlay_intdiv2 = QHBoxLayout()
        hlay_intdiv2.addWidget(int_div_label2)
        hlay_intdiv2.addWidget(self.int_div_line2)
        self.int_div_label3 = QLabel("Calculate result.")
        self.int_div_label3.setMaximumWidth(300)
        self.int_div_label3.setMaximumHeight(150)
        self.int_div_label3.setWordWrap(True)
        int_div_go = QPushButton("Go!")
        int_div_go.setMaximumWidth(300)
        hlay_intdiv3 = QHBoxLayout()
        hlay_intdiv3.addWidget(self.int_div_label3)
        hlay_intdiv3.addWidget(int_div_go)
        int_div_lay = QVBoxLayout()
        int_div_lay.addLayout(hlay_intdiv0)
        int_div_lay.addLayout(hlay_intdiv1)
        int_div_lay.addLayout(hlay_intdiv2)
        int_div_lay.addLayout(hlay_intdiv3)
        int_div.setLayout(int_div_lay)
        int_div_back.clicked.connect(self.calc_back)
        int_div_go.clicked.connect(self.the_intdiv)

        perc = QWidget()
        perc_label0 = QLabel("Percentage of one number from another.")
        perc_back = QPushButton("Back")
        perc_label0.setMaximumWidth(300)
        perc_back.setMaximumWidth(300)
        hlay_perc0 = QHBoxLayout()
        hlay_perc0.addWidget(perc_label0)
        hlay_perc0.addWidget(perc_back)
        perc_label1 = QLabel("First number(smaller)")
        perc_label1.setMaximumWidth(300)
        self.perc_line1 = QLineEdit()
        self.perc_line1.setMaximumWidth(300)
        self.perc_line1.setValidator(valid0)
        hlay_perc1 = QHBoxLayout()
        hlay_perc1.addWidget(perc_label1)
        hlay_perc1.addWidget(self.perc_line1)
        perc_label2 = QLabel("Second number(larger)")
        perc_label2.setMaximumWidth(300)
        self.perc_line2 = QLineEdit()
        self.perc_line2.setMaximumWidth(300)
        self.perc_line2.setValidator(valid0)
        hlay_perc2 = QHBoxLayout()
        hlay_perc2.addWidget(perc_label2)
        hlay_perc2.addWidget(self.perc_line2)
        self.perc_label3 = QLabel("Calculate result.")
        self.perc_label3.setMaximumWidth(300)
        self.perc_label3.setMaximumHeight(150)
        self.perc_label3.setWordWrap(True)
        perc_go = QPushButton("Go!")
        perc_go.setMaximumWidth(300)
        hlay_perc3 = QHBoxLayout()
        hlay_perc3.addWidget(self.perc_label3)
        hlay_perc3.addWidget(perc_go)
        perc_lay = QVBoxLayout()
        perc_lay.addLayout(hlay_perc0)
        perc_lay.addLayout(hlay_perc1)
        perc_lay.addLayout(hlay_perc2)
        perc_lay.addLayout(hlay_perc3)
        perc.setLayout(perc_lay)
        perc_back.clicked.connect(self.calc_back)
        perc_go.clicked.connect(self.the_perc)

        self.main_wdgt.addWidget(first)
        self.main_wdgt.addWidget(sum)
        self.main_wdgt.addWidget(diff)
        self.main_wdgt.addWidget(multi)
        self.main_wdgt.addWidget(divis)
        self.main_wdgt.addWidget(power)
        self.main_wdgt.addWidget(root)
        self.main_wdgt.addWidget(prime)
        self.main_wdgt.addWidget(leacom)
        self.main_wdgt.addWidget(int_div)
        self.main_wdgt.addWidget(perc)

        sum_but.clicked.connect(self.sum_act)
        diff_but.clicked.connect(self.diff_act)
        multi_but.clicked.connect(self.multi_act)
        divis_but.clicked.connect(self.divis_act)
        power_but.clicked.connect(self.power_act)
        root_but.clicked.connect(self.root_act)
        prime_but.clicked.connect(self.prime_act)
        leacom_but.clicked.connect(self.leacom_act)
        int_div_but.clicked.connect(self.int_div_act)
        perc_but.clicked.connect(self.perc_act)
        
        layout = QHBoxLayout()
        layout.addWidget(self.main_wdgt)
        self.setLayout(layout)

    def calc_back(self):
        self.main_wdgt.setCurrentIndex(0)
    def sum_act(self):
        self.main_wdgt.setCurrentIndex(1)
    def diff_act(self):
        self.main_wdgt.setCurrentIndex(2)
    def multi_act(self):
        self.main_wdgt.setCurrentIndex(3)
    def divis_act(self):
        self.main_wdgt.setCurrentIndex(4)
    def power_act(self):
        self.main_wdgt.setCurrentIndex(5)
    def root_act(self):
        self.main_wdgt.setCurrentIndex(6)
    def prime_act(self):
        self.main_wdgt.setCurrentIndex(7)
    def leacom_act(self):
        self.main_wdgt.setCurrentIndex(8)
    def int_div_act(self):
        self.main_wdgt.setCurrentIndex(9)
    def perc_act(self):
        self.main_wdgt.setCurrentIndex(10)

    def the_sum(self):
        edlines = [self.sum_line1, self.sum_line2, self.sum_line3, self.sum_line4]
        numbers = []
        for ed in edlines:
            if ed.hasAcceptableInput():
                numbers.append(float(ed.text()))
        if len(numbers) < 2:
            self.warn0()
        else:
            self.sum_label5.setFrameShape(QFrame.Shape.Box)
            self.sum_label5.setLineWidth(3)
            if len(numbers) == 2:
                self.sum_label5.setText(f"The sum is {calc1re.calc_sum(numbers[0], numbers[1])}.")
                self.history.append(f"{numbers[0]} + {numbers[1]} = {calc1re.calc_sum(numbers[0], numbers[1])}")
            elif len(numbers) == 3:
                self.sum_label5.setText(f"The sum is {calc1re.calc_sum(numbers[0], numbers[1], numbers[2])}.")
                self.history.append(f"{numbers[0]} + {numbers[1]} + {numbers[2]} = {calc1re.calc_sum(numbers[0], numbers[1], numbers[2])}")
            elif len(numbers) == 4:
                self.sum_label5.setText(f"The sum is {calc1re.calc_sum(numbers[0], numbers[1], numbers[2], numbers[3])}.")
                self.history.append(f"{numbers[0]} + {numbers[1]} + {numbers[2]} + {numbers[3]} = {calc1re.calc_sum(numbers[0], numbers[1], numbers[2], numbers[3])}")

    def the_diff(self):
        edlines = [self.diff_line1, self.diff_line2, self.diff_line3]
        numbers = []
        for ed in edlines:
            if ed.hasAcceptableInput():
                numbers.append(float(ed.text()))
        if len(numbers) < 2:
            self.warn0()
        else:
            self.diff_label4.setFrameShape(QFrame.Shape.Box)
            self.diff_label4.setLineWidth(3)
            if len(numbers) == 2:
                self.diff_label4.setText(f"The difference is {calc1re.calc_diff(numbers[0], numbers[1])}.")
                self.history.append(f"{numbers[0]} - {numbers[1]} = {calc1re.calc_diff(numbers[0], numbers[1])}")
            elif len(numbers) == 3:
                self.diff_label4.setText(f"The difference is {calc1re.calc_diff(numbers[0], numbers[1], numbers[2])}.")
                self.history.append(f"{numbers[0]} - {numbers[1]} - {numbers[2]} = {calc1re.calc_diff(numbers[0], numbers[1], numbers[2])}")

    def the_mult(self):
        edlines = [self.multi_line1, self.multi_line2, self.multi_line3, self.multi_line4]
        numbers = []
        for ed in edlines:
            if ed.hasAcceptableInput():
                numbers.append(float(ed.text()))
        if len(numbers) < 2:
            self.warn0()
        else:
            self.multi_label5.setFrameShape(QFrame.Shape.Box)
            self.multi_label5.setLineWidth(3)
            if len(numbers) == 2:
                self.multi_label5.setText(f"The result of the multiplication is {calc1re.calc_multi(numbers[0], numbers[1])}.")
                self.history.append(f"{numbers[0]} * {numbers[1]} = {calc1re.calc_multi(numbers[0], numbers[1])}")
            elif len(numbers) == 3:
                self.multi_label5.setText(f"The result of the multiplication is {calc1re.calc_multi(numbers[0], numbers[1], numbers[2])}.")
                self.history.append(f"{numbers[0]} * {numbers[1]} * {numbers[2]} = {calc1re.calc_multi(numbers[0], numbers[1], numbers[2])}")
            elif len(numbers) == 4:
                self.multi_label5.setText(f"The result of the multiplication is {calc1re.calc_multi(numbers[0], numbers[1], numbers[2], numbers[3])}.")
                self.history.append(f"{numbers[0]} * {numbers[1]} * {numbers[2]} * {numbers[3]} = {calc1re.calc_multi(numbers[0], numbers[1], numbers[2], numbers[3])}")

    def the_divis(self):
        edlines = [self.divis_line1, self.divis_line2, self.divis_line3]
        numbers = []
        for ed in edlines:
            if ed.hasAcceptableInput():
                numbers.append(float(ed.text()))
        if len(numbers) < 2:
            self.warn0()
        else:
            self.divis_label4.setFrameShape(QFrame.Shape.Box)
            self.divis_label4.setLineWidth(3)
            if len(numbers) == 2:
                if numbers[1] == 0:
                    self.warn1()
                else:
                    self.divis_label4.setText(f"The result of the division is {calc1re.calc_div(numbers[0], numbers[1])}.")
                    self.history.append(f"{numbers[0]} / {numbers[1]} = {calc1re.calc_div(numbers[0], numbers[1])}")
            elif len(numbers) == 3:
                if numbers[1] == 0 or numbers[2] == 0:
                    self.warn1()
                else:
                    self.divis_label4.setText(f"The result of the division is {calc1re.calc_div(numbers[0], numbers[1], numbers[2])}.")
                    self.history.append(f"{numbers[0]} / {numbers[1]} / {numbers[2]} = {calc1re.calc_div(numbers[0], numbers[1], numbers[2])}")

    def the_pwr(self):
        edlines = [self.power_line1, self.power_line2]
        numbers = []
        for ed in edlines:
            if ed.hasAcceptableInput():
                numbers.append(float(ed.text()))
        if len(numbers) < 2:
            self.warn2()
        else:
            self.power_label3.setFrameShape(QFrame.Shape.Box)
            self.power_label3.setLineWidth(3)
            self.power_label3.setText(f"{numbers[0]} to the power of {numbers[1]} is {calc1re.calc_pow(numbers[0], numbers[1])}.")
            self.history.append(f"{numbers[0]} ** {numbers[1]} = {calc1re.calc_pow(numbers[0], numbers[1])}")

    def the_root(self):
        if self.root_line.hasAcceptableInput():
            num = (float(self.root_line.text()))
            self.root_label2.setFrameShape(QFrame.Shape.Box)
            self.root_label2.setLineWidth(3)
            self.root_label2.setText(f"The square root of {num} is {calc1re.calc_root(num)}.")
            self.history.append(f"√{num} = {calc1re.calc_root(num)}")
        else:
            self.warn3()
    
    def the_prim(self):
        if self.prime_line.hasAcceptableInput():
            num = (int(self.prime_line.text()))
            self.prime_label2.setFrameShape(QFrame.Shape.Box)
            self.prime_label2.setLineWidth(3)
            self.prime_label2.setText(calc1re.calc_prime(num))
            self.history.append(calc1re.calc_prime(num))
        else:
            self.warn3()

    def the_leacom(self):
        edlines = [self.leacom_line1, self.leacom_line2, self.leacom_line3]
        numbers = []
        for ed in edlines:
            if ed.hasAcceptableInput():
                numbers.append(int(ed.text()))
        if len(numbers) < 2:
            self.warn0()
        else:
            self.leacom_label4.setFrameShape(QFrame.Shape.Box)
            self.leacom_label4.setLineWidth(3)
            if len(numbers) == 2:
                self.leacom_label4.setText(f"The least common multiple of {numbers[0]} and {numbers[1]} is {calc1re.calc_lcm(numbers[0], numbers[1])}.")
                self.history.append(f"The least common multiple of {numbers[0]} and {numbers[1]} is {calc1re.calc_lcm(numbers[0], numbers[1])}.")
            elif len(numbers) == 3:
                self.leacom_label4.setText(f"The least common multiple of {numbers[0]}, {numbers[1]} and {numbers[2]} is {calc1re.calc_lcm(numbers[0], numbers[1], numbers[2])}.")
                self.history.append(f"The least common multiple of {numbers[0]}, {numbers[1]} and {numbers[2]} is {calc1re.calc_lcm(numbers[0], numbers[1], numbers[2])}.")

    def the_intdiv(self):
        edlines = [self.int_div_line1, self.int_div_line2]
        numbers = []
        for ed in edlines:
            if ed.hasAcceptableInput():
                numbers.append(int(ed.text()))
        if len(numbers) < 2:
            self.warn2()
        elif numbers[1] == 0:
            self.warn1()
        else:
            self.int_div_label3.setFrameShape(QFrame.Shape.Box)
            self.int_div_label3.setLineWidth(3)
            self.int_div_label3.setText(calc1re.calc_intdiv(numbers[0], numbers[1]))
            self.history.append(calc1re.calc_intdiv(numbers[0], numbers[1]))
        
    def the_perc(self):
        edlines = [self.perc_line1, self.perc_line2]
        numbers = []
        for ed in edlines:
            if ed.hasAcceptableInput():
                numbers.append(float(ed.text()))
        if len(numbers) < 2:
            self.warn2()
        else:
            self.perc_label3.setFrameShape(QFrame.Shape.Box)
            self.perc_label3.setLineWidth(3)
            self.perc_label3.setText(f"{numbers[0]} is {calc1re.calc_pcent(numbers[0], numbers[1])}% of {numbers[1]}.")
            self.history.append(f"{numbers[0]} is {calc1re.calc_pcent(numbers[0], numbers[1])}% of {numbers[1]}.")

    def warn0(self):
        QMessageBox.warning(self, "Not good.", "Please enter at least two valid numbers.", QMessageBox.Ok)
    def warn1(self):
        QMessageBox.critical(self, "Not good.", "Please do no try to divide by zero.", QMessageBox.Ok)
    def warn2(self):
        QMessageBox.warning(self, "Not good.", "Please enter two valid numbers.", QMessageBox.Ok)
    def warn3(self):
        QMessageBox.warning(self, "Not good.", "Please enter a valid number.", QMessageBox.Ok)

prog = QApplication()
wind = QMainWindow()
what = Whatever()
wind.setWindowTitle("Calculate")
wind.setMinimumSize(QSize(1280, 720))
wind.setMaximumSize(QSize(1920, 1080))
wind.setCentralWidget(what)

wind.show()
prog.exec()